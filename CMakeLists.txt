cmake_minimum_required(VERSION 3.5)

project(sfm LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set (PSP_VERSION_MAJOR 1.3 CACHE STRING "PSP version")
option(USE_EIGEN3 "USE Eigen3 Library" ON)
option(USE_PYTHON "USE Python Library" OFF)
option(USE_LEMON "USE LEMMON Library" OFF)
option(USE_BOOST_OPTION "USE BOOST OPTION Library" OFF)
if(USE_EIGEN3)
    find_package(Eigen3 REQUIRED)
    set(USE_EIGEN3_LIB 1)
else()
    set(USE_EIGEN3_LIB 0)
endif()
if(USE_LEMON)
    find_package(lemon REQUIRED)
    set(USE_LEMON_LIB 1)
else()
    set(USE_LEMON_LIB 0)
endif()
add_executable(main main.cpp)
if(USE_BOOST_OPTION OR USE_PYTHON)
    set(USE_BOOST_INCLUDE 1)
    find_package(Boost REQUIRED)
    target_include_directories(main PUBLIC ${Boost_INCLUDE_DIRS})
else()
    set(USE_BOOST_INCLUDE 0)
endif()

if(WIN32)
    set(DYNAMIC_LIB_SUFFIX dll)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")    
    set(DYNAMIC_LIB_SUFFIX dylib)
else()
    set(DYNAMIC_LIB_SUFFIX so)
endif()

if(USE_BOOST_OPTION OR USE_PYTHON)
    find_package(Boost REQUIRED program_options)
    if(WIN32)
        target_link_libraries(main debug ${Boost_PROGRAM_OPTIONS_LIBRARY_DEBUG})    
        target_link_libraries(main optimized ${Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE})
    else()    
        target_link_libraries(main ${Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE})
    endif()
endif()
if(USE_LEMON)
    target_link_libraries(main ${LEMON_LIBRARY})
endif()
configure_file (
  "${PROJECT_SOURCE_DIR}/core/config.h.in"
  "${PROJECT_BINARY_DIR}/config.h"
  )

include_directories(${PROJECT_SOURCE_DIR})
include_directories(${PROJECT_BINARY_DIR})
if(USE_EIGEN3)    
    include_directories(${EIGEN3_INCLUDE_DIR})
endif()
if(USE_LEMON)
    include_directories(${LEMON_INCLUDE_DIR})
endif()    

if(USE_PYTHON)
    find_package(PythonLibs)
    find_package(PythonInterp)
    if("$ENV{APPVEYOR}" AND WIN32)
        set(PYTHON_EXECUTABLE C:/Python36-x64/python.exe)
        set(PYTHON_VERSION_MAJOR 3)
        set(PYTHON_VERSION_MINOR 6)
    endif()
    if(WIN32)
        find_package(Boost REQUIRED python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        find_package(Boost REQUIRED python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})    
    else()
        find_package(Boost REQUIRED python-py${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR})    
    endif()
    add_library(psp SHARED ${PROJECT_SOURCE_DIR}/core/python/psp.cpp)
    target_include_directories(psp PUBLIC ${PYTHON_INCLUDE_DIR})
    target_include_directories(psp PUBLIC ${Boost_INCLUDE_DIRS})
    
    if(WIN32)
        target_link_libraries(psp debug ${Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARY_DEBUG})    
        target_link_libraries(psp optimized ${Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARY_RELEASE})
    elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
        target_link_libraries(psp ${Boost_PYTHON${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARY_RELEASE})
    else()
        target_link_libraries(psp ${Boost_PYTHON-PY${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_LIBRARY_RELEASE})
    endif()
    if(USE_LEMON)
        if(UNIX)
            set_target_properties(psp PROPERTIES LINK_FLAGS "-fPIC")
        endif()
        target_link_libraries(psp ${LEMON_LIBRARY})
    endif()    
    # magic files to extract the release library
    
    if(WIN32 AND "$ENV{APPVEYOR}" STREQUAL "")
        string(REPLACE "debug" ";" PYTHON_LIBRARY ${PYTHON_LIBRARY})
        list(GET PYTHON_LIBRARY 0 PYTHON_LIBRARY)
        string(REPLACE "optimized" ";" PYTHON_LIBRARY ${PYTHON_LIBRARY})
        list(GET PYTHON_LIBRARY 1 PYTHON_RELEASE_LIBRARY)
        # we don't link the debug build with Python debug lib, since we are not interested in python core debug info.
        target_link_libraries(psp ${PYTHON_RELEASE_LIBRARY}) 
    else()
        target_link_libraries(psp ${PYTHON_LIBRARY}) 
    endif()
    
    execute_process(COMMAND ${PYTHON_EXECUTABLE} -c "import site;print(site.getsitepackages()[-1],end='')" OUTPUT_VARIABLE PYTHON_SIDE_PACKAGES)
endif()
option(ENABLE_TESTING "Enable testing" OFF)
add_subdirectory(set)
add_subdirectory(preflow)
add_subdirectory(core)
target_link_libraries(main ic_static)
target_link_libraries(main pmf)
target_link_libraries(main set_stl)
if(USE_PYTHON)
    target_link_libraries(psp ic_static)
    target_link_libraries(psp pmf)
    target_link_libraries(psp set_stl)
endif()
if(ENABLE_TESTING)
  find_package(GTest REQUIRED)
  include(CTest)
  add_subdirectory(test)
endif()
